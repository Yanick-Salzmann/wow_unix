// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "js_event.proto" (package "wow.web.proto", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message wow.web.proto.Wrapper
 */
export interface Wrapper {
    /**
     * @generated from protobuf field: wow.web.proto.JsEvent event = 1
     */
    event?: JsEvent;
}
/**
 * @generated from protobuf message wow.web.proto.JsEvent
 */
export interface JsEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "initializeRequest";
        /**
         * @generated from protobuf field: wow.web.proto.InitializeRequest initialize_request = 1
         */
        initializeRequest: InitializeRequest;
    } | {
        oneofKind: "browseFolderRequest";
        /**
         * @generated from protobuf field: wow.web.proto.BrowseFolderRequest browse_folder_request = 2
         */
        browseFolderRequest: BrowseFolderRequest;
    } | {
        oneofKind: "browseFolderResponse";
        /**
         * @generated from protobuf field: wow.web.proto.BrowseFolderResponse browse_folder_response = 3
         */
        browseFolderResponse: BrowseFolderResponse;
    } | {
        oneofKind: "emptyResponse";
        /**
         * @generated from protobuf field: wow.web.proto.EmptyResponse empty_response = 4
         */
        emptyResponse: EmptyResponse;
    } | {
        oneofKind: "loadDataEvent";
        /**
         * @generated from protobuf field: wow.web.proto.LoadDataEvent load_data_event = 5
         */
        loadDataEvent: LoadDataEvent;
    } | {
        oneofKind: "loadUpdateEvent";
        /**
         * @generated from protobuf field: wow.web.proto.LoadUpdateEvent load_update_event = 6
         */
        loadUpdateEvent: LoadUpdateEvent;
    } | {
        oneofKind: "listMapsRequest";
        /**
         * @generated from protobuf field: wow.web.proto.ListMapsRequest list_maps_request = 7
         */
        listMapsRequest: ListMapsRequest;
    } | {
        oneofKind: "listMapsResponse";
        /**
         * @generated from protobuf field: wow.web.proto.ListMapsResponse list_maps_response = 8
         */
        listMapsResponse: ListMapsResponse;
    } | {
        oneofKind: "listMapPoisRequest";
        /**
         * @generated from protobuf field: wow.web.proto.ListMapPoisRequest list_map_pois_request = 9
         */
        listMapPoisRequest: ListMapPoisRequest;
    } | {
        oneofKind: "listMapPoisResponse";
        /**
         * @generated from protobuf field: wow.web.proto.ListMapPoisResponse list_map_pois_response = 10
         */
        listMapPoisResponse: ListMapPoisResponse;
    } | {
        oneofKind: "enterWorldRequest";
        /**
         * @generated from protobuf field: wow.web.proto.EnterWorldRequest enter_world_request = 11
         */
        enterWorldRequest: EnterWorldRequest;
    } | {
        oneofKind: "loadingScreenShowEvent";
        /**
         * @generated from protobuf field: wow.web.proto.LoadingScreenShowEvent loading_screen_show_event = 12
         */
        loadingScreenShowEvent: LoadingScreenShowEvent;
    } | {
        oneofKind: "loadingScreenProgressEvent";
        /**
         * @generated from protobuf field: wow.web.proto.LoadingScreenProgressEvent loading_screen_progress_event = 13
         */
        loadingScreenProgressEvent: LoadingScreenProgressEvent;
    } | {
        oneofKind: "loadingScreenCompleteEvent";
        /**
         * @generated from protobuf field: wow.web.proto.LoadingScreenCompleteEvent loading_screen_complete_event = 14
         */
        loadingScreenCompleteEvent: LoadingScreenCompleteEvent;
    } | {
        oneofKind: "areaUpdateEvent";
        /**
         * @generated from protobuf field: wow.web.proto.AreaUpdateEvent area_update_event = 15
         */
        areaUpdateEvent: AreaUpdateEvent;
    } | {
        oneofKind: "worldPositionUpdateEvent";
        /**
         * @generated from protobuf field: wow.web.proto.WorldPositionUpdateEvent world_position_update_event = 16
         */
        worldPositionUpdateEvent: WorldPositionUpdateEvent;
    } | {
        oneofKind: "fpsUpdateEvent";
        /**
         * @generated from protobuf field: wow.web.proto.FpsUpdateEvent fps_update_event = 17
         */
        fpsUpdateEvent: FpsUpdateEvent;
    } | {
        oneofKind: "systemUpdateEvent";
        /**
         * @generated from protobuf field: wow.web.proto.SystemUpdateEvent system_update_event = 18
         */
        systemUpdateEvent: SystemUpdateEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message wow.web.proto.InitializeRequest
 */
export interface InitializeRequest {
}
/**
 * @generated from protobuf message wow.web.proto.BrowseFolderRequest
 */
export interface BrowseFolderRequest {
    /**
     * @generated from protobuf field: string title = 1
     */
    title: string;
    /**
     * @generated from protobuf field: string default_path = 2
     */
    defaultPath: string;
    /**
     * @generated from protobuf field: repeated string filters = 3
     */
    filters: string[];
    /**
     * @generated from protobuf field: bool allow_create = 4
     */
    allowCreate: boolean;
}
/**
 * @generated from protobuf message wow.web.proto.BrowseFolderResponse
 */
export interface BrowseFolderResponse {
    /**
     * @generated from protobuf field: bool canceled = 1
     */
    canceled: boolean;
    /**
     * @generated from protobuf field: string path = 2
     */
    path: string;
}
/**
 * @generated from protobuf message wow.web.proto.EmptyResponse
 */
export interface EmptyResponse {
}
/**
 * @generated from protobuf message wow.web.proto.LoadDataEvent
 */
export interface LoadDataEvent {
    /**
     * @generated from protobuf field: string folder = 1
     */
    folder: string;
}
/**
 * @generated from protobuf message wow.web.proto.LoadUpdateEvent
 */
export interface LoadUpdateEvent {
    /**
     * @generated from protobuf field: int32 percentage = 1
     */
    percentage: number;
    /**
     * @generated from protobuf field: bool completed = 5
     */
    completed: boolean;
    /**
     * @generated from protobuf field: string message = 10
     */
    message: string;
}
/**
 * @generated from protobuf message wow.web.proto.ListMapsRequest
 */
export interface ListMapsRequest {
}
/**
 * @generated from protobuf message wow.web.proto.ListMapsResponseMap
 */
export interface ListMapsResponseMap {
    /**
     * @generated from protobuf field: int32 map_id = 1
     */
    mapId: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string loading_screen = 3
     */
    loadingScreen: string;
}
/**
 * @generated from protobuf message wow.web.proto.ListMapsResponse
 */
export interface ListMapsResponse {
    /**
     * @generated from protobuf field: repeated wow.web.proto.ListMapsResponseMap maps = 1
     */
    maps: ListMapsResponseMap[];
}
/**
 * @generated from protobuf message wow.web.proto.ListMapPoisRequest
 */
export interface ListMapPoisRequest {
    /**
     * @generated from protobuf field: int32 map_id = 1
     */
    mapId: number;
}
/**
 * @generated from protobuf message wow.web.proto.MapPoi
 */
export interface MapPoi {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: float x = 3
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 4
     */
    y: number;
}
/**
 * @generated from protobuf message wow.web.proto.ListMapPoisResponse
 */
export interface ListMapPoisResponse {
    /**
     * @generated from protobuf field: int32 map_id = 1
     */
    mapId: number;
    /**
     * @generated from protobuf field: repeated wow.web.proto.MapPoi pois = 2
     */
    pois: MapPoi[];
}
/**
 * @generated from protobuf message wow.web.proto.EnterWorldRequest
 */
export interface EnterWorldRequest {
    /**
     * @generated from protobuf field: int32 map_id = 1
     */
    mapId: number;
    /**
     * @generated from protobuf field: float x = 2
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 3
     */
    y: number;
}
/**
 * @generated from protobuf message wow.web.proto.LoadingScreenShowEvent
 */
export interface LoadingScreenShowEvent {
    /**
     * @generated from protobuf field: string image_path = 1
     */
    imagePath: string;
}
/**
 * @generated from protobuf message wow.web.proto.LoadingScreenProgressEvent
 */
export interface LoadingScreenProgressEvent {
    /**
     * @generated from protobuf field: float percentage = 1
     */
    percentage: number;
}
/**
 * @generated from protobuf message wow.web.proto.LoadingScreenCompleteEvent
 */
export interface LoadingScreenCompleteEvent {
}
/**
 * @generated from protobuf message wow.web.proto.AreaUpdateEvent
 */
export interface AreaUpdateEvent {
    /**
     * @generated from protobuf field: string area_name = 1
     */
    areaName: string;
    /**
     * @generated from protobuf field: int32 area_id = 2
     */
    areaId: number;
}
/**
 * @generated from protobuf message wow.web.proto.WorldPositionUpdateEvent
 */
export interface WorldPositionUpdateEvent {
    /**
     * @generated from protobuf field: string map_name = 1
     */
    mapName: string;
    /**
     * @generated from protobuf field: int32 map_id = 2
     */
    mapId: number;
    /**
     * @generated from protobuf field: float x = 3
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 4
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 5
     */
    z: number;
}
/**
 * @generated from protobuf message wow.web.proto.FpsUpdateEvent
 */
export interface FpsUpdateEvent {
    /**
     * @generated from protobuf field: int32 fps = 1
     */
    fps: number;
}
/**
 * @generated from protobuf message wow.web.proto.SystemUpdateEvent
 */
export interface SystemUpdateEvent {
    /**
     * @generated from protobuf field: int64 memory_usage = 1
     */
    memoryUsage: bigint;
    /**
     * @generated from protobuf field: int32 cpu_usage = 2
     */
    cpuUsage: number;
    /**
     * @generated from protobuf field: int32 gpu_usage = 3
     */
    gpuUsage: number;
    /**
     * @generated from protobuf field: int64 total_memory = 4
     */
    totalMemory: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class Wrapper$Type extends MessageType<Wrapper> {
    constructor() {
        super("wow.web.proto.Wrapper", [
            { no: 1, name: "event", kind: "message", T: () => JsEvent }
        ]);
    }
    create(value?: PartialMessage<Wrapper>): Wrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Wrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Wrapper): Wrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wow.web.proto.JsEvent event */ 1:
                    message.event = JsEvent.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Wrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* wow.web.proto.JsEvent event = 1; */
        if (message.event)
            JsEvent.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.Wrapper
 */
export const Wrapper = new Wrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JsEvent$Type extends MessageType<JsEvent> {
    constructor() {
        super("wow.web.proto.JsEvent", [
            { no: 1, name: "initialize_request", kind: "message", oneof: "event", T: () => InitializeRequest },
            { no: 2, name: "browse_folder_request", kind: "message", oneof: "event", T: () => BrowseFolderRequest },
            { no: 3, name: "browse_folder_response", kind: "message", oneof: "event", T: () => BrowseFolderResponse },
            { no: 4, name: "empty_response", kind: "message", oneof: "event", T: () => EmptyResponse },
            { no: 5, name: "load_data_event", kind: "message", oneof: "event", T: () => LoadDataEvent },
            { no: 6, name: "load_update_event", kind: "message", oneof: "event", T: () => LoadUpdateEvent },
            { no: 7, name: "list_maps_request", kind: "message", oneof: "event", T: () => ListMapsRequest },
            { no: 8, name: "list_maps_response", kind: "message", oneof: "event", T: () => ListMapsResponse },
            { no: 9, name: "list_map_pois_request", kind: "message", oneof: "event", T: () => ListMapPoisRequest },
            { no: 10, name: "list_map_pois_response", kind: "message", oneof: "event", T: () => ListMapPoisResponse },
            { no: 11, name: "enter_world_request", kind: "message", oneof: "event", T: () => EnterWorldRequest },
            { no: 12, name: "loading_screen_show_event", kind: "message", oneof: "event", T: () => LoadingScreenShowEvent },
            { no: 13, name: "loading_screen_progress_event", kind: "message", oneof: "event", T: () => LoadingScreenProgressEvent },
            { no: 14, name: "loading_screen_complete_event", kind: "message", oneof: "event", T: () => LoadingScreenCompleteEvent },
            { no: 15, name: "area_update_event", kind: "message", oneof: "event", T: () => AreaUpdateEvent },
            { no: 16, name: "world_position_update_event", kind: "message", oneof: "event", T: () => WorldPositionUpdateEvent },
            { no: 17, name: "fps_update_event", kind: "message", oneof: "event", T: () => FpsUpdateEvent },
            { no: 18, name: "system_update_event", kind: "message", oneof: "event", T: () => SystemUpdateEvent }
        ]);
    }
    create(value?: PartialMessage<JsEvent>): JsEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<JsEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JsEvent): JsEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* wow.web.proto.InitializeRequest initialize_request */ 1:
                    message.event = {
                        oneofKind: "initializeRequest",
                        initializeRequest: InitializeRequest.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).initializeRequest)
                    };
                    break;
                case /* wow.web.proto.BrowseFolderRequest browse_folder_request */ 2:
                    message.event = {
                        oneofKind: "browseFolderRequest",
                        browseFolderRequest: BrowseFolderRequest.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).browseFolderRequest)
                    };
                    break;
                case /* wow.web.proto.BrowseFolderResponse browse_folder_response */ 3:
                    message.event = {
                        oneofKind: "browseFolderResponse",
                        browseFolderResponse: BrowseFolderResponse.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).browseFolderResponse)
                    };
                    break;
                case /* wow.web.proto.EmptyResponse empty_response */ 4:
                    message.event = {
                        oneofKind: "emptyResponse",
                        emptyResponse: EmptyResponse.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).emptyResponse)
                    };
                    break;
                case /* wow.web.proto.LoadDataEvent load_data_event */ 5:
                    message.event = {
                        oneofKind: "loadDataEvent",
                        loadDataEvent: LoadDataEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).loadDataEvent)
                    };
                    break;
                case /* wow.web.proto.LoadUpdateEvent load_update_event */ 6:
                    message.event = {
                        oneofKind: "loadUpdateEvent",
                        loadUpdateEvent: LoadUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).loadUpdateEvent)
                    };
                    break;
                case /* wow.web.proto.ListMapsRequest list_maps_request */ 7:
                    message.event = {
                        oneofKind: "listMapsRequest",
                        listMapsRequest: ListMapsRequest.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).listMapsRequest)
                    };
                    break;
                case /* wow.web.proto.ListMapsResponse list_maps_response */ 8:
                    message.event = {
                        oneofKind: "listMapsResponse",
                        listMapsResponse: ListMapsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).listMapsResponse)
                    };
                    break;
                case /* wow.web.proto.ListMapPoisRequest list_map_pois_request */ 9:
                    message.event = {
                        oneofKind: "listMapPoisRequest",
                        listMapPoisRequest: ListMapPoisRequest.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).listMapPoisRequest)
                    };
                    break;
                case /* wow.web.proto.ListMapPoisResponse list_map_pois_response */ 10:
                    message.event = {
                        oneofKind: "listMapPoisResponse",
                        listMapPoisResponse: ListMapPoisResponse.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).listMapPoisResponse)
                    };
                    break;
                case /* wow.web.proto.EnterWorldRequest enter_world_request */ 11:
                    message.event = {
                        oneofKind: "enterWorldRequest",
                        enterWorldRequest: EnterWorldRequest.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).enterWorldRequest)
                    };
                    break;
                case /* wow.web.proto.LoadingScreenShowEvent loading_screen_show_event */ 12:
                    message.event = {
                        oneofKind: "loadingScreenShowEvent",
                        loadingScreenShowEvent: LoadingScreenShowEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).loadingScreenShowEvent)
                    };
                    break;
                case /* wow.web.proto.LoadingScreenProgressEvent loading_screen_progress_event */ 13:
                    message.event = {
                        oneofKind: "loadingScreenProgressEvent",
                        loadingScreenProgressEvent: LoadingScreenProgressEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).loadingScreenProgressEvent)
                    };
                    break;
                case /* wow.web.proto.LoadingScreenCompleteEvent loading_screen_complete_event */ 14:
                    message.event = {
                        oneofKind: "loadingScreenCompleteEvent",
                        loadingScreenCompleteEvent: LoadingScreenCompleteEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).loadingScreenCompleteEvent)
                    };
                    break;
                case /* wow.web.proto.AreaUpdateEvent area_update_event */ 15:
                    message.event = {
                        oneofKind: "areaUpdateEvent",
                        areaUpdateEvent: AreaUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).areaUpdateEvent)
                    };
                    break;
                case /* wow.web.proto.WorldPositionUpdateEvent world_position_update_event */ 16:
                    message.event = {
                        oneofKind: "worldPositionUpdateEvent",
                        worldPositionUpdateEvent: WorldPositionUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).worldPositionUpdateEvent)
                    };
                    break;
                case /* wow.web.proto.FpsUpdateEvent fps_update_event */ 17:
                    message.event = {
                        oneofKind: "fpsUpdateEvent",
                        fpsUpdateEvent: FpsUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).fpsUpdateEvent)
                    };
                    break;
                case /* wow.web.proto.SystemUpdateEvent system_update_event */ 18:
                    message.event = {
                        oneofKind: "systemUpdateEvent",
                        systemUpdateEvent: SystemUpdateEvent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).systemUpdateEvent)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JsEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* wow.web.proto.InitializeRequest initialize_request = 1; */
        if (message.event.oneofKind === "initializeRequest")
            InitializeRequest.internalBinaryWrite(message.event.initializeRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.BrowseFolderRequest browse_folder_request = 2; */
        if (message.event.oneofKind === "browseFolderRequest")
            BrowseFolderRequest.internalBinaryWrite(message.event.browseFolderRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.BrowseFolderResponse browse_folder_response = 3; */
        if (message.event.oneofKind === "browseFolderResponse")
            BrowseFolderResponse.internalBinaryWrite(message.event.browseFolderResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.EmptyResponse empty_response = 4; */
        if (message.event.oneofKind === "emptyResponse")
            EmptyResponse.internalBinaryWrite(message.event.emptyResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.LoadDataEvent load_data_event = 5; */
        if (message.event.oneofKind === "loadDataEvent")
            LoadDataEvent.internalBinaryWrite(message.event.loadDataEvent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.LoadUpdateEvent load_update_event = 6; */
        if (message.event.oneofKind === "loadUpdateEvent")
            LoadUpdateEvent.internalBinaryWrite(message.event.loadUpdateEvent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.ListMapsRequest list_maps_request = 7; */
        if (message.event.oneofKind === "listMapsRequest")
            ListMapsRequest.internalBinaryWrite(message.event.listMapsRequest, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.ListMapsResponse list_maps_response = 8; */
        if (message.event.oneofKind === "listMapsResponse")
            ListMapsResponse.internalBinaryWrite(message.event.listMapsResponse, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.ListMapPoisRequest list_map_pois_request = 9; */
        if (message.event.oneofKind === "listMapPoisRequest")
            ListMapPoisRequest.internalBinaryWrite(message.event.listMapPoisRequest, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.ListMapPoisResponse list_map_pois_response = 10; */
        if (message.event.oneofKind === "listMapPoisResponse")
            ListMapPoisResponse.internalBinaryWrite(message.event.listMapPoisResponse, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.EnterWorldRequest enter_world_request = 11; */
        if (message.event.oneofKind === "enterWorldRequest")
            EnterWorldRequest.internalBinaryWrite(message.event.enterWorldRequest, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.LoadingScreenShowEvent loading_screen_show_event = 12; */
        if (message.event.oneofKind === "loadingScreenShowEvent")
            LoadingScreenShowEvent.internalBinaryWrite(message.event.loadingScreenShowEvent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.LoadingScreenProgressEvent loading_screen_progress_event = 13; */
        if (message.event.oneofKind === "loadingScreenProgressEvent")
            LoadingScreenProgressEvent.internalBinaryWrite(message.event.loadingScreenProgressEvent, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.LoadingScreenCompleteEvent loading_screen_complete_event = 14; */
        if (message.event.oneofKind === "loadingScreenCompleteEvent")
            LoadingScreenCompleteEvent.internalBinaryWrite(message.event.loadingScreenCompleteEvent, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.AreaUpdateEvent area_update_event = 15; */
        if (message.event.oneofKind === "areaUpdateEvent")
            AreaUpdateEvent.internalBinaryWrite(message.event.areaUpdateEvent, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.WorldPositionUpdateEvent world_position_update_event = 16; */
        if (message.event.oneofKind === "worldPositionUpdateEvent")
            WorldPositionUpdateEvent.internalBinaryWrite(message.event.worldPositionUpdateEvent, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.FpsUpdateEvent fps_update_event = 17; */
        if (message.event.oneofKind === "fpsUpdateEvent")
            FpsUpdateEvent.internalBinaryWrite(message.event.fpsUpdateEvent, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* wow.web.proto.SystemUpdateEvent system_update_event = 18; */
        if (message.event.oneofKind === "systemUpdateEvent")
            SystemUpdateEvent.internalBinaryWrite(message.event.systemUpdateEvent, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.JsEvent
 */
export const JsEvent = new JsEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitializeRequest$Type extends MessageType<InitializeRequest> {
    constructor() {
        super("wow.web.proto.InitializeRequest", []);
    }
    create(value?: PartialMessage<InitializeRequest>): InitializeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InitializeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitializeRequest): InitializeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitializeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.InitializeRequest
 */
export const InitializeRequest = new InitializeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrowseFolderRequest$Type extends MessageType<BrowseFolderRequest> {
    constructor() {
        super("wow.web.proto.BrowseFolderRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "default_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "filters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "allow_create", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BrowseFolderRequest>): BrowseFolderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.defaultPath = "";
        message.filters = [];
        message.allowCreate = false;
        if (value !== undefined)
            reflectionMergePartial<BrowseFolderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrowseFolderRequest): BrowseFolderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string default_path */ 2:
                    message.defaultPath = reader.string();
                    break;
                case /* repeated string filters */ 3:
                    message.filters.push(reader.string());
                    break;
                case /* bool allow_create */ 4:
                    message.allowCreate = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrowseFolderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string default_path = 2; */
        if (message.defaultPath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultPath);
        /* repeated string filters = 3; */
        for (let i = 0; i < message.filters.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.filters[i]);
        /* bool allow_create = 4; */
        if (message.allowCreate !== false)
            writer.tag(4, WireType.Varint).bool(message.allowCreate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.BrowseFolderRequest
 */
export const BrowseFolderRequest = new BrowseFolderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrowseFolderResponse$Type extends MessageType<BrowseFolderResponse> {
    constructor() {
        super("wow.web.proto.BrowseFolderResponse", [
            { no: 1, name: "canceled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrowseFolderResponse>): BrowseFolderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.canceled = false;
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<BrowseFolderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrowseFolderResponse): BrowseFolderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool canceled */ 1:
                    message.canceled = reader.bool();
                    break;
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrowseFolderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool canceled = 1; */
        if (message.canceled !== false)
            writer.tag(1, WireType.Varint).bool(message.canceled);
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.BrowseFolderResponse
 */
export const BrowseFolderResponse = new BrowseFolderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmptyResponse$Type extends MessageType<EmptyResponse> {
    constructor() {
        super("wow.web.proto.EmptyResponse", []);
    }
    create(value?: PartialMessage<EmptyResponse>): EmptyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EmptyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmptyResponse): EmptyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmptyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.EmptyResponse
 */
export const EmptyResponse = new EmptyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadDataEvent$Type extends MessageType<LoadDataEvent> {
    constructor() {
        super("wow.web.proto.LoadDataEvent", [
            { no: 1, name: "folder", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadDataEvent>): LoadDataEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.folder = "";
        if (value !== undefined)
            reflectionMergePartial<LoadDataEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadDataEvent): LoadDataEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string folder */ 1:
                    message.folder = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadDataEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string folder = 1; */
        if (message.folder !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.folder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.LoadDataEvent
 */
export const LoadDataEvent = new LoadDataEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadUpdateEvent$Type extends MessageType<LoadUpdateEvent> {
    constructor() {
        super("wow.web.proto.LoadUpdateEvent", [
            { no: 1, name: "percentage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "completed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadUpdateEvent>): LoadUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.percentage = 0;
        message.completed = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<LoadUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadUpdateEvent): LoadUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 percentage */ 1:
                    message.percentage = reader.int32();
                    break;
                case /* bool completed */ 5:
                    message.completed = reader.bool();
                    break;
                case /* string message */ 10:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 percentage = 1; */
        if (message.percentage !== 0)
            writer.tag(1, WireType.Varint).int32(message.percentage);
        /* bool completed = 5; */
        if (message.completed !== false)
            writer.tag(5, WireType.Varint).bool(message.completed);
        /* string message = 10; */
        if (message.message !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.LoadUpdateEvent
 */
export const LoadUpdateEvent = new LoadUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMapsRequest$Type extends MessageType<ListMapsRequest> {
    constructor() {
        super("wow.web.proto.ListMapsRequest", []);
    }
    create(value?: PartialMessage<ListMapsRequest>): ListMapsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListMapsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMapsRequest): ListMapsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMapsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.ListMapsRequest
 */
export const ListMapsRequest = new ListMapsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMapsResponseMap$Type extends MessageType<ListMapsResponseMap> {
    constructor() {
        super("wow.web.proto.ListMapsResponseMap", [
            { no: 1, name: "map_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "loading_screen", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListMapsResponseMap>): ListMapsResponseMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapId = 0;
        message.name = "";
        message.loadingScreen = "";
        if (value !== undefined)
            reflectionMergePartial<ListMapsResponseMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMapsResponseMap): ListMapsResponseMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 map_id */ 1:
                    message.mapId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string loading_screen */ 3:
                    message.loadingScreen = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMapsResponseMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 map_id = 1; */
        if (message.mapId !== 0)
            writer.tag(1, WireType.Varint).int32(message.mapId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string loading_screen = 3; */
        if (message.loadingScreen !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loadingScreen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.ListMapsResponseMap
 */
export const ListMapsResponseMap = new ListMapsResponseMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMapsResponse$Type extends MessageType<ListMapsResponse> {
    constructor() {
        super("wow.web.proto.ListMapsResponse", [
            { no: 1, name: "maps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ListMapsResponseMap }
        ]);
    }
    create(value?: PartialMessage<ListMapsResponse>): ListMapsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.maps = [];
        if (value !== undefined)
            reflectionMergePartial<ListMapsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMapsResponse): ListMapsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated wow.web.proto.ListMapsResponseMap maps */ 1:
                    message.maps.push(ListMapsResponseMap.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMapsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated wow.web.proto.ListMapsResponseMap maps = 1; */
        for (let i = 0; i < message.maps.length; i++)
            ListMapsResponseMap.internalBinaryWrite(message.maps[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.ListMapsResponse
 */
export const ListMapsResponse = new ListMapsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMapPoisRequest$Type extends MessageType<ListMapPoisRequest> {
    constructor() {
        super("wow.web.proto.ListMapPoisRequest", [
            { no: 1, name: "map_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListMapPoisRequest>): ListMapPoisRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListMapPoisRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMapPoisRequest): ListMapPoisRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 map_id */ 1:
                    message.mapId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMapPoisRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 map_id = 1; */
        if (message.mapId !== 0)
            writer.tag(1, WireType.Varint).int32(message.mapId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.ListMapPoisRequest
 */
export const ListMapPoisRequest = new ListMapPoisRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MapPoi$Type extends MessageType<MapPoi> {
    constructor() {
        super("wow.web.proto.MapPoi", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<MapPoi>): MapPoi {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<MapPoi>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MapPoi): MapPoi {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* float x */ 3:
                    message.x = reader.float();
                    break;
                case /* float y */ 4:
                    message.y = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MapPoi, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* float x = 3; */
        if (message.x !== 0)
            writer.tag(3, WireType.Bit32).float(message.x);
        /* float y = 4; */
        if (message.y !== 0)
            writer.tag(4, WireType.Bit32).float(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.MapPoi
 */
export const MapPoi = new MapPoi$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMapPoisResponse$Type extends MessageType<ListMapPoisResponse> {
    constructor() {
        super("wow.web.proto.ListMapPoisResponse", [
            { no: 1, name: "map_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "pois", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MapPoi }
        ]);
    }
    create(value?: PartialMessage<ListMapPoisResponse>): ListMapPoisResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapId = 0;
        message.pois = [];
        if (value !== undefined)
            reflectionMergePartial<ListMapPoisResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMapPoisResponse): ListMapPoisResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 map_id */ 1:
                    message.mapId = reader.int32();
                    break;
                case /* repeated wow.web.proto.MapPoi pois */ 2:
                    message.pois.push(MapPoi.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMapPoisResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 map_id = 1; */
        if (message.mapId !== 0)
            writer.tag(1, WireType.Varint).int32(message.mapId);
        /* repeated wow.web.proto.MapPoi pois = 2; */
        for (let i = 0; i < message.pois.length; i++)
            MapPoi.internalBinaryWrite(message.pois[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.ListMapPoisResponse
 */
export const ListMapPoisResponse = new ListMapPoisResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterWorldRequest$Type extends MessageType<EnterWorldRequest> {
    constructor() {
        super("wow.web.proto.EnterWorldRequest", [
            { no: 1, name: "map_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<EnterWorldRequest>): EnterWorldRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapId = 0;
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<EnterWorldRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterWorldRequest): EnterWorldRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 map_id */ 1:
                    message.mapId = reader.int32();
                    break;
                case /* float x */ 2:
                    message.x = reader.float();
                    break;
                case /* float y */ 3:
                    message.y = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterWorldRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 map_id = 1; */
        if (message.mapId !== 0)
            writer.tag(1, WireType.Varint).int32(message.mapId);
        /* float x = 2; */
        if (message.x !== 0)
            writer.tag(2, WireType.Bit32).float(message.x);
        /* float y = 3; */
        if (message.y !== 0)
            writer.tag(3, WireType.Bit32).float(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.EnterWorldRequest
 */
export const EnterWorldRequest = new EnterWorldRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadingScreenShowEvent$Type extends MessageType<LoadingScreenShowEvent> {
    constructor() {
        super("wow.web.proto.LoadingScreenShowEvent", [
            { no: 1, name: "image_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoadingScreenShowEvent>): LoadingScreenShowEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imagePath = "";
        if (value !== undefined)
            reflectionMergePartial<LoadingScreenShowEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadingScreenShowEvent): LoadingScreenShowEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image_path */ 1:
                    message.imagePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadingScreenShowEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image_path = 1; */
        if (message.imagePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.imagePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.LoadingScreenShowEvent
 */
export const LoadingScreenShowEvent = new LoadingScreenShowEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadingScreenProgressEvent$Type extends MessageType<LoadingScreenProgressEvent> {
    constructor() {
        super("wow.web.proto.LoadingScreenProgressEvent", [
            { no: 1, name: "percentage", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<LoadingScreenProgressEvent>): LoadingScreenProgressEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.percentage = 0;
        if (value !== undefined)
            reflectionMergePartial<LoadingScreenProgressEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadingScreenProgressEvent): LoadingScreenProgressEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float percentage */ 1:
                    message.percentage = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadingScreenProgressEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float percentage = 1; */
        if (message.percentage !== 0)
            writer.tag(1, WireType.Bit32).float(message.percentage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.LoadingScreenProgressEvent
 */
export const LoadingScreenProgressEvent = new LoadingScreenProgressEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadingScreenCompleteEvent$Type extends MessageType<LoadingScreenCompleteEvent> {
    constructor() {
        super("wow.web.proto.LoadingScreenCompleteEvent", []);
    }
    create(value?: PartialMessage<LoadingScreenCompleteEvent>): LoadingScreenCompleteEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LoadingScreenCompleteEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadingScreenCompleteEvent): LoadingScreenCompleteEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadingScreenCompleteEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.LoadingScreenCompleteEvent
 */
export const LoadingScreenCompleteEvent = new LoadingScreenCompleteEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaUpdateEvent$Type extends MessageType<AreaUpdateEvent> {
    constructor() {
        super("wow.web.proto.AreaUpdateEvent", [
            { no: 1, name: "area_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "area_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AreaUpdateEvent>): AreaUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.areaName = "";
        message.areaId = 0;
        if (value !== undefined)
            reflectionMergePartial<AreaUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaUpdateEvent): AreaUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string area_name */ 1:
                    message.areaName = reader.string();
                    break;
                case /* int32 area_id */ 2:
                    message.areaId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string area_name = 1; */
        if (message.areaName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.areaName);
        /* int32 area_id = 2; */
        if (message.areaId !== 0)
            writer.tag(2, WireType.Varint).int32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.AreaUpdateEvent
 */
export const AreaUpdateEvent = new AreaUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPositionUpdateEvent$Type extends MessageType<WorldPositionUpdateEvent> {
    constructor() {
        super("wow.web.proto.WorldPositionUpdateEvent", [
            { no: 1, name: "map_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "map_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<WorldPositionUpdateEvent>): WorldPositionUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapName = "";
        message.mapId = 0;
        message.x = 0;
        message.y = 0;
        message.z = 0;
        if (value !== undefined)
            reflectionMergePartial<WorldPositionUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPositionUpdateEvent): WorldPositionUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string map_name */ 1:
                    message.mapName = reader.string();
                    break;
                case /* int32 map_id */ 2:
                    message.mapId = reader.int32();
                    break;
                case /* float x */ 3:
                    message.x = reader.float();
                    break;
                case /* float y */ 4:
                    message.y = reader.float();
                    break;
                case /* float z */ 5:
                    message.z = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldPositionUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string map_name = 1; */
        if (message.mapName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.mapName);
        /* int32 map_id = 2; */
        if (message.mapId !== 0)
            writer.tag(2, WireType.Varint).int32(message.mapId);
        /* float x = 3; */
        if (message.x !== 0)
            writer.tag(3, WireType.Bit32).float(message.x);
        /* float y = 4; */
        if (message.y !== 0)
            writer.tag(4, WireType.Bit32).float(message.y);
        /* float z = 5; */
        if (message.z !== 0)
            writer.tag(5, WireType.Bit32).float(message.z);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.WorldPositionUpdateEvent
 */
export const WorldPositionUpdateEvent = new WorldPositionUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FpsUpdateEvent$Type extends MessageType<FpsUpdateEvent> {
    constructor() {
        super("wow.web.proto.FpsUpdateEvent", [
            { no: 1, name: "fps", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FpsUpdateEvent>): FpsUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fps = 0;
        if (value !== undefined)
            reflectionMergePartial<FpsUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FpsUpdateEvent): FpsUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 fps */ 1:
                    message.fps = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FpsUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 fps = 1; */
        if (message.fps !== 0)
            writer.tag(1, WireType.Varint).int32(message.fps);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.FpsUpdateEvent
 */
export const FpsUpdateEvent = new FpsUpdateEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemUpdateEvent$Type extends MessageType<SystemUpdateEvent> {
    constructor() {
        super("wow.web.proto.SystemUpdateEvent", [
            { no: 1, name: "memory_usage", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cpu_usage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "gpu_usage", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total_memory", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SystemUpdateEvent>): SystemUpdateEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.memoryUsage = 0n;
        message.cpuUsage = 0;
        message.gpuUsage = 0;
        message.totalMemory = 0n;
        if (value !== undefined)
            reflectionMergePartial<SystemUpdateEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemUpdateEvent): SystemUpdateEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 memory_usage */ 1:
                    message.memoryUsage = reader.int64().toBigInt();
                    break;
                case /* int32 cpu_usage */ 2:
                    message.cpuUsage = reader.int32();
                    break;
                case /* int32 gpu_usage */ 3:
                    message.gpuUsage = reader.int32();
                    break;
                case /* int64 total_memory */ 4:
                    message.totalMemory = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemUpdateEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 memory_usage = 1; */
        if (message.memoryUsage !== 0n)
            writer.tag(1, WireType.Varint).int64(message.memoryUsage);
        /* int32 cpu_usage = 2; */
        if (message.cpuUsage !== 0)
            writer.tag(2, WireType.Varint).int32(message.cpuUsage);
        /* int32 gpu_usage = 3; */
        if (message.gpuUsage !== 0)
            writer.tag(3, WireType.Varint).int32(message.gpuUsage);
        /* int64 total_memory = 4; */
        if (message.totalMemory !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalMemory);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message wow.web.proto.SystemUpdateEvent
 */
export const SystemUpdateEvent = new SystemUpdateEvent$Type();
