# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    tags:
      - '*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install X dependencies
      run: sudo apt-get update && sudo apt-get install libx11-dev libglib2.0-dev libgtk-3-dev

    - name: Download CEF
      run: wget -nv https://cef-builds.spotifycdn.com/cef_binary_139.0.40%2Bg465474a%2Bchromium-139.0.7258.139_linux64.tar.bz2 && tar -xf cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64.tar.bz2

    - name: Build CEF
      working-directory: cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64
      run: mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j 4

    - name: Link CEF Wrapper
      run: ln -sn $(realpath cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/build/libcef_dll_wrapper/libcef_dll_wrapper.a) libcef_dll_wrapper.a

    - name: Link CEF base library
      run: mkdir -p build && ln -sn $(realpath cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/libcef.so) build/libcef.so

    - name: Link CEF includes
      run: mkdir -p cef && ln -sn $(realpath cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/include) cef/include

    - name: Debug
      run: ls -la && ls -la cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/build/libcef_dll_wrapper && stat $(realpath libcef_dll_wrapper.a)

    - name: Install node/npm
      run: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash && export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && nvm install node

    - name: Install npm packages
      run: npm install --global protoc-gen-ts

    - name: Build abseil
      run: git clone https://github.com/abseil/abseil-cpp.git && cd abseil-cpp && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j 4 && sudo make install

    - name: Build protobuf
      run: git clone https://github.com/protocolbuffers/protobuf.git && mkdir -p protobuf/build && cd protobuf/build && cmake -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_LIBUPB=ON .. && make -j 4 && sudo make install

    - name: Install dev libraries
      run: sudo apt-get install -y libgl1-mesa-dev libegl1-mesa-dev libgtk-3-dev libboost1.83-dev
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Debug2
      run: ls -la ui/src/app/proto && cat ui/src/app/proto/js_event.ts

    - name: Build UI
      working-directory: ui
      run: npm install && npm run build

    - name: Collect artifacts
      run: |
        mkdir -p artifacts
        mkdir -p artifacts/ui
        cp build/wow_unix artifacts/
        cp build/wow_unix_browser artifacts/
        cp -r shaders artifacts/
        cp -r ui/dist/angular-ui/browser/* artifacts/ui/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/chrome-sandbox artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/libcef.so artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/libEGL.so artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/libGLESv2.so artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/libvk_swiftshader.so artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/libvulkan.so.1 artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/v8_context_snapshot.bin artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Release/vk_swiftshader_icd.json artifacts/
        cp -r cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Resources/locales artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Resources/chrome_100_percent.pak artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Resources/chrome_200_percent.pak artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Resources/icudtl.dat artifacts/
        cp cef_binary_139.0.40+g465474a+chromium-139.0.7258.139_linux64/Resources/resources.pak artifacts/

    - name: Create Release Archive
      run: |
        cd artifacts
        tar -czf ../wow-unix-${{ github.ref_name }}-linux64.tar.gz *
        cd ..

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: wow-unix-${{ github.ref_name }}-linux64.tar.gz
        generate_release_notes: true
